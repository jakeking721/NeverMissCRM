- [NEW] Replace demo Change Email/Password alerts in `src/pages/Settings.tsx` with real Supabase auth updates.
  Steps:
    1. Use Supabase auth methods to update the user's email and password.
    2. Replace `alert` placeholders with success/error toasts.

- [NEW] Manually verify busy-state login checks for imports and campaign deletion.
  Steps:
    1. Attempt CSV/JSON import while logged out and confirm the alert prevents the action.
    2. Repeat the import and campaign deletion flows while logged in to ensure they succeed.

- [NEW] Replace placeholder loading spinner used in `ProtectedRoute` and `RedirectIfLoggedIn` with final branded loader.
  Steps:
    1. Design or import a spinner component matching production branding.
    2. Update `src/routes/ProtectedRoute.tsx` to use the new loader.

- [NEW] Apply Supabase migration `20240717120000_update_campaigns_table.sql` to add campaign scheduling columns and triggers.
  Steps:
    1. Run `supabase db push` or execute the SQL file in Supabase's SQL editor.
    2. Verify `campaigns` now includes `recipients` (text[]), `status`, `scheduled_for`, and the `set_updated_at` trigger.

- [NEW] Apply Supabase migration `20240717121000_add_updated_at_to_customers.sql` to track customer updates.
  Steps:
    1. Run `supabase db push` or execute the SQL in Supabase's SQL editor.
    2. Confirm `customers` table has `updated_at` column and trigger.

- [NEW] Apply Supabase migration `20240717122000_create_credit_ledger.sql` to enable credit history tracking.
  Steps:
    1. Run `supabase db push` or run the SQL file in the Supabase dashboard.
    2. Ensure `credit_ledger` table exists with RLS policy `credit_ledger_owner_rw`.

- [NEW] Regenerate Supabase types in `src/types/supabase.ts` with Supabase CLI output.
  Steps:
    1. Run `supabase gen types typescript --project-id <PROJECT_ID> --schema public > src/types/supabase.ts`.
    2. Ensure the generated file stays updated with future schema changes.

- [NEW] Reapply migration `20240715120000_add_campaign_forms_and_custom_fields.sql` to fix policy references from `owner_id` to `user_id`.
  Steps:
    1. From the project root, run `supabase db push` or execute the SQL in Supabase's SQL editor.
    2. In the Table editor, confirm policies on `campaign_forms` reference `user_id` and no errors appear.

- [NEW] Apply Supabase migration `20240710120000_create_campaigns_table.sql` to create the `campaigns` table.
  Steps:
    1. From the project root, run `supabase db push` (requires Supabase CLI) or execute the SQL in Supabase dashboard's SQL editor.
    2. In Table editor, confirm `campaigns` has columns `id`, `user_id`, `name`, `message`, timestamps, the index `campaigns_user_id_idx`, and RLS policy `campaigns_owner_rw`.

- [NEW] Apply Supabase migration `20240710130000_create_campaign_templates_table.sql` to create the `campaign_templates` table.
  Steps:
    1. From the project root, run `supabase db push` or run the SQL in Supabase dashboard's SQL editor.
    2. In Table editor, verify `campaign_templates` exists with expected columns, index `campaign_templates_user_id_idx`, and RLS policy `campaign_templates_owner_rw`.

- [NEW] Apply Supabase migration `20240710140000_create_public_slugs_table.sql` to create the `public_slugs` table for public campaign links.
  Steps:
    1. From the project root, run `supabase db push` or execute the SQL in Supabase dashboard's SQL editor.
    2. In Table editor, confirm `public_slugs` has columns `slug`, `user_id`, `created_at`, index `public_slugs_user_id_idx`, and RLS policies `public_slugs_owner_rw` and `public_slugs_public_select`.

- [NEW] Re-run Supabase migration `20240716125959_patch_add_slug_to_campaign_forms.sql` to reset the unique constraint to `(campaign_id, slug)` until `owner_id` is added later.
  Steps:
    1. From the project root, run `supabase db push` (requires Supabase CLI) or execute the SQL in Supabase dashboard's SQL editor.
    2. In Table editor for `campaign_forms`, confirm the constraint `campaign_forms_campaign_id_slug_key` exists and `owner_id` column is still absent.

- [NEW] Apply Supabase migration `20240715120000_add_campaign_forms_and_custom_fields.sql` to ensure `custom_fields` and `campaign_forms` tables and policies are updated safely.
  Steps:
    1. From the project root, run `supabase db push` (requires Supabase CLI) or execute the SQL in the Supabase dashboard's SQL editor.
    2. In Table editor, verify both tables include all expected columns, unique constraints, and row level security policies.
- [NEW] Apply Supabase migration `20250806030000_add_customers_table_and_values.sql` to create `customers` and `customer_custom_field_values` tables.
  Steps:
    1. From the project root, run `supabase db push` (requires Supabase CLI) or run the SQL from that migration in the Supabase dashboard's SQL editor.
    2. In Table editor, confirm both tables exist with RLS policies and the index `customers_user_id_idx`.
- [NEW] Apply Supabase migration `20250806040000_add_intake_function_and_bucket.sql` to create the `intake_add_customer` RPC and ensure the `form-uploads` bucket exists.
  Steps:
    1. From the project root, run `supabase db push` (requires Supabase CLI) or run the SQL from that migration in the Supabase dashboard's SQL editor.
    2. In the SQL editor, verify the RPC `intake_add_customer` accepts parameters (`p_slug`, `p_name`, `p_phone`, `p_location`, `p_extra`, `p_user_id`).
    3. In Supabase Storage, confirm the `form-uploads` bucket is present or created.

- [NEW] Sync updated migrations using `supabase db push` to apply the new `create or replace` policies and `IF NOT EXISTS` constraints.
  Steps:
    1. From the project root, run `supabase db push`.
    2. In Supabase dashboard, verify policies on affected tables (e.g., `campaigns`, `campaign_templates`, `public_slugs`, `custom_fields`, `campaign_forms`, `customers`, and `customer_custom_field_values`) appear without duplicates and constraints exist as expected.
- No manual steps required for removal of placeholder `/* FOOTER */` comment in `src/pages/Home.tsx`.
- No manual steps required for replacing alert dialogs with toast notifications in `src/pages/Customers.tsx` and `src/pages/builder/FormBuilder.tsx`.
- No manual steps required for guarding CSV/JSON import modals behind authentication in `src/pages/Customers.tsx`.
- Replace placeholder hero and patriot banner images in `src/components/home/HeroSection.tsx` and `src/components/home/PatriotBanner.tsx` with production assets. Steps: (1) Upload final images to an assets directory or CDN. (2) Update `HERO_MEDIA` and `PEOPLE_IMG` constants with the new URLs or imports. (3) Run `npm run build` to verify they load correctly.
- Replace the temporary SMS service in `src/services/smsService.ts` with a real provider (e.g., Twilio) and remove `alert` calls and localStorage logging.
- Configure production environment variables for SMS API credentials and scheduling backend.
- Clean up any demo SMS logs stored in localStorage before launch.
- Manually verify the new mobile block palette and property panel drawers on multiple real devices and screen sizes, adjusting Tailwind styles if any layout issues arise.
- Test touch drag-and-drop in the form builder on physical iOS/Android browsers to confirm sensors and styles handle mobile gestures.
  - Address npm warning about unknown `http-proxy` env config in deployment environment. Steps: (1) Remove `http-proxy` and `https-proxy` environment variables or rename to `HTTP_PROXY`/`HTTPS_PROXY`. (2) Use `npm config set proxy <url>` if a proxy is required.
  - Remove demo seed scripts (`src/dev/seed.ts` and `src/dev/seed.local.ts`) and delete any sample accounts from production. Steps: (1) Delete scripts. (2) Purge demo users.
- Ensure `.env` variables `VITE_SUPABASE_URL`, `VITE_SUPABASE_ANON_KEY`, and `VITE_PUBLIC_APP_URL` are set to production values (placeholders currently committed). Steps: (1) Edit `.env` with real URLs/keys. (2) Redeploy.
- After integrating a real SMS provider, update `src/utils/credits.ts` `DEFAULT_SMS_COST_PER_SEGMENT` and remove `src/utils/demoSMS.ts`. Steps: (1) Adjust constant to provider rate. (2) Delete file and references.
- Persist credit balance updates to Supabase. Steps: (1) Replace TODOs in `src/utils/credits.ts` with calls to update `profiles.credits`. (2) Confirm RLS policies allow current users to modify their own credits when appropriate.
- Ensure admin accounts have `role='admin'` in `profiles` for access to admin routes. Steps: (1) In Supabase Table editor, set the `role` column to `admin` for desired users. (2) Test AdminLogin to confirm redirection works.
- Replace local object URL handling for image and PDF uploads in the form builder with real Supabase storage uploads and persist returned URLs in `schema_json`.
- Verify PDF waiver display styles and acceptance checkbox in production browsers; add backend validation and storage for uploaded files.
- Expand segment builder capabilities with nested groups, range filters for numbers/dates, and a server-side query builder. Steps: (1) Update UI to support grouped rules. (2) Implement filtering logic. (3) Expose backend query endpoint.
- For bulk SMS, add server-side credit enforcement, chunking/rate limiting with retries, and template variable parsing. Steps: (1) Verify credits on backend before sending. (2) Split sends into provider-compliant batches and retry on failures. (3) Parse variables before dispatch.
- Replace simulated credit purchase flow in `creditsService.beginUserPurchase` with a Stripe Checkout session and show transaction history on the billing page. Steps: (1) Create backend to generate Checkout sessions. (2) Redirect users to returned URL. (3) After webhooks update credits, render recent invoices in `src/pages/Settings/Billing.tsx`.
- Implement server-side scheduling, delivery status tracking, and retries for SMS once a provider is integrated. Steps: (1) Use provider API/webhooks to track status. (2) Persist message logs in database. (3) Retry failed sends according to carrier guidelines.
- Improve form builder slug UX. Steps: (1) Enhance slug input to auto-generate/validate unique slugs and prevent duplicates.
  - Confirm Inter font loads in production and host locally if external requests are restricted. Steps: (1) Visit the deployed app and verify the font in browser dev tools. (2) If blocked, download the Inter font files and serve them from the app's assets directory.
- Optional: Allow forms without campaigns. Steps: (1) In the Supabase SQL editor or CLI, run `alter table public.campaign_forms alter column campaign_id drop not null;`. (2) From the project root, execute `supabase db push` to apply the migration. [i did this step, now nullable?]

- [NEW] Verify CSV import works in browsers without Web Crypto support after switch to uuid-based IDs.
  Steps:
    1. Build and deploy the app.
    2. Test Bulk Import in an older browser lacking `crypto.randomUUID` support.
    3. Confirm contact IDs are generated and import succeeds.
- [NEW] Manually verify in Supabase that imported customer rows are associated with the correct `user_id` and remove any placeholder/demo data.
  Steps:
    1. In the Supabase dashboard, open the Table editor for the `customers` table.
    2. Filter by your user ID and ensure each imported row has that `user_id` value.
    3. Delete any placeholder or demo contacts (e.g., rows named "Imported #1" or other sample data).

- [NEW] Verify `intake_add_customer` RPC executes after deployment.
  Steps:
    1. Deploy the updated app.
    2. Submit a test intake form to trigger the RPC.
    3. In Supabase, open the `customers` table and confirm the test row appears with the correct `user_id` and slug.
    4. Delete the test row once verified.
